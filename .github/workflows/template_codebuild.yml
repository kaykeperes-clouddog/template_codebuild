# Arquivo: template_codebuild/.github/workflows/template_codebuild.yml

name: Checkov Reutilizável - Validação de Segurança

on:
  workflow_call:

permissions:
  contents: read

jobs:
  checkov-scan:
    name: Run Checkov Security Scan
    runs-on: codebuild-checkov-validate-${{ github.run_id }}-${{ github.run_attempt }}

    steps:
      - name: Checkout do código (Do Repositório Chamador!)
        uses: actions/checkout@v4

      - name: Instalar Dependências (Checkov, JQ, YQ)
        run: |
          pip install checkov
          yum install -y jq
          
          # Instala o yq manualmente (baixando o binário)
          echo "Instalando yq..."
          YQ_VERSION="v4.44.2" # Use a versão mais recente se preferir
          YQ_BINARY="yq_linux_amd64"
          wget https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/${YQ_BINARY}.tar.gz -O /tmp/yq.tar.gz
          tar -xzf /tmp/yq.tar.gz -C /tmp
          mv /tmp/${YQ_BINARY} /usr/bin/yq
          chmod +x /usr/bin/yq
          yq --version # Verifica se a instalação funcionou

      # --- CÓDIGO DO ASSUME ROLE COMPLETO ---
      - name: Assumir Role da conta PRD e exportar credenciais
        run: |
          echo "Assumindo a role da conta PRD..."
          # 1. Pede o "crachá de visitante" (Assume Role)
          CREDS=$(aws sts assume-role \
                    --role-arn "arn:aws:iam::977919013454:role/clouddog-checkov-prd-role" \
                    --role-session-name "CheckovReusableWorkflowSession")
          
          # 2. Configura o AWS CLI para USAR esse crachá nos próximos passos
          echo "AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r .Credentials.AccessKeyId)" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r .Credentials.SecretAccessKey)" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(echo $CREDS | jq -r .Credentials.SessionToken)" >> $GITHUB_ENV
          echo "Credenciais temporárias prontas para os próximos passos."
      # --- FIM DO CÓDIGO DO ASSUME ROLE ---
      
      - name: Baixar arquivo de configuração CENTRAL do S3 (de PRD)
        run: |
          # Cria pasta separada para config central
          mkdir -p ./checkov_config_central 
          aws s3 cp s3://clouddog-checkov-prd-bucket/checkov/.checkov.yml ./checkov_config_central/.checkov.yml
          echo "Configuração central baixada."

      # --- Lógica para ler os skips locais ---
      - name: Preparar Skips Locais (do checkov_overrides.yml)
        id: local_skips # ID para referenciar o output
        run: |
          LOCAL_SKIP_FILE="checkov_overrides.yml" # Nome do arquivo local de skips
          SKIP_LIST=""          
          echo "Verificando se o arquivo de skip local ($LOCAL_SKIP_FILE) existe..."
          if [ -s "$LOCAL_SKIP_FILE" ]; then 
            echo "Arquivo $LOCAL_SKIP_FILE encontrado. Extraindo skips..."
            SKIP_LIST=$(yq '.skip-check[] | select(length > 0)' "$LOCAL_SKIP_FILE" | paste -sd,)
            echo "Skips locais encontrados: $SKIP_LIST"
          else
            echo "Nenhum arquivo de skip local ($LOCAL_SKIP_FILE) encontrado ou está vazio."
          fi
          echo "skip_list=$SKIP_LIST" >> $GITHUB_OUTPUT
      # --- Fim da lógica dos skips ---

      - name: Rodar análise de segurança
        run: |
          echo "Rodando scan do Checkov na pasta ./terraform usando config CENTRAL e skips LOCAIS..."          
          # Constrói a flag --skip-check apenas se a lista não estiver vazia
          SKIP_FLAG=""
          if [[ -n "${{ steps.local_skips.outputs.skip_list }}" ]]; then
            SKIP_FLAG="--skip-check ${{ steps.local_skips.outputs.skip_list }}"
            echo "Aplicando skips locais: $SKIP_FLAG"
          else
            echo "Nenhum skip local para aplicar."
          fi

          # Comando final: Usa config central + skips locais (se houver)
          checkov -d ./terraform \
                  --config-file ${{ github.workspace }}/checkov_config_central/.checkov.yml \
                  $SKIP_FLAG